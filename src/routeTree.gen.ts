/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './pages/__root'
import { Route as AppRouteImport } from './pages/_app'
import { Route as AppUsertableRouteImport } from './pages/_app/usertable'
import { Route as AppAudioplayerRouteImport } from './pages/_app/audioplayer'

const SigninLazyRouteImport = createFileRoute('/signin')()
const AppIndexLazyRouteImport = createFileRoute('/_app/')()

const SigninLazyRoute = SigninLazyRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/signin.lazy').then((d) => d.Route))
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexLazyRoute = AppIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any).lazy(() => import('./pages/_app/index.lazy').then((d) => d.Route))
const AppUsertableRoute = AppUsertableRouteImport.update({
  id: '/usertable',
  path: '/usertable',
  getParentRoute: () => AppRoute,
} as any)
const AppAudioplayerRoute = AppAudioplayerRouteImport.update({
  id: '/audioplayer',
  path: '/audioplayer',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/signin': typeof SigninLazyRoute
  '/audioplayer': typeof AppAudioplayerRoute
  '/usertable': typeof AppUsertableRoute
  '/': typeof AppIndexLazyRoute
}
export interface FileRoutesByTo {
  '/signin': typeof SigninLazyRoute
  '/audioplayer': typeof AppAudioplayerRoute
  '/usertable': typeof AppUsertableRoute
  '/': typeof AppIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/signin': typeof SigninLazyRoute
  '/_app/audioplayer': typeof AppAudioplayerRoute
  '/_app/usertable': typeof AppUsertableRoute
  '/_app/': typeof AppIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/signin' | '/audioplayer' | '/usertable' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/signin' | '/audioplayer' | '/usertable' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/signin'
    | '/_app/audioplayer'
    | '/_app/usertable'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  SigninLazyRoute: typeof SigninLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexLazyRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/usertable': {
      id: '/_app/usertable'
      path: '/usertable'
      fullPath: '/usertable'
      preLoaderRoute: typeof AppUsertableRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/audioplayer': {
      id: '/_app/audioplayer'
      path: '/audioplayer'
      fullPath: '/audioplayer'
      preLoaderRoute: typeof AppAudioplayerRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAudioplayerRoute: typeof AppAudioplayerRoute
  AppUsertableRoute: typeof AppUsertableRoute
  AppIndexLazyRoute: typeof AppIndexLazyRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAudioplayerRoute: AppAudioplayerRoute,
  AppUsertableRoute: AppUsertableRoute,
  AppIndexLazyRoute: AppIndexLazyRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  SigninLazyRoute: SigninLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
